# Domain Services & Domain Events
Domain Driven Design

Muhammad Ferdian Iqbal
Naufal Adli Purnama
Samuel

## Domain Events

—_A domain event captures the memory of something interesting which affects the domain_— Martin Fowler

Domain event allow aggregate to react in another aggregate without coupling them


## Domain Events
Events = peristiwa atau sesuatu yang telah terjadi di masa lalu

Dalam aplikasi yang kita buat kita bisa mencatat kejadian tersebut dengan informasi yang kita perlukan sebagai Domain Event.


## Mengapa Butuh Domain Events?
Memberi sistem kita kesempatan untuk **membalas atau memberi response** terhadap kejadian

_kalau ada orang yang mau connect dengan kita di LinkedIn, kita harus buka aplikasinya baru bisa tau kalau CEO Google mau connect sama kita. Tapi karena kita kelamaan ngeliatnya gajadi dia, itu bisa jadi kesempatan yang hilang_ (；′⌒`)

## Pertimbangan

- Apakah setiap ada update database kita harus peduli?
- Apakah user harus dikirim notifikasi setiap dia login/register?
- Apakah setiap gerakan kita harus dicatat dalam daftar log?
- Apakah kita harus selalu chat pacar kalo kita mau main sama temen?

Jawabannya: **it depends**

## Contoh: User memesan ojek online

Setiap events dapat dimasukkan ke dalam sejenis worker

    List<String> events = new List<String>();
    events.push('Pelanggan memesan objek');

\
Mengapa perlu mencatat ini sebagai domain event?\
Domainnya platform transportasi jadi kegiatan memesan itu penting buat bisnis. \
Kita perlu menerima pesanan pelanggan dan mencari gojek terdekat untuk mengantar pelanggan.

_Siapa yang pesan? Di mana dia? Mau ke mana? Bayar pake apa?_


## Base Events
    public class Event {
        public DateTime timestamp { get; private set; }
        public String message { get; private set; }

        Event(String message, DateTime timestamp) {
            this.message = message;
            this.timestamp = timestamp;
        }
    }

## Events
    public class CustomerOrderedOjekEvent : Event {
        public int customerId { get; }
        private set;
        public int orderId { get; }
        private set;

        CustomerOrderedOjekEvent(
                int customerId, 
                int orderId, 
                String message, 
                DateTime timestamp
        ) : base(message, timestamp) {
                this.customerId = customerId;
                this.orderId = orderId;
        }
    }

## Contoh
    List<Event> events = new List<Event>();
    events.push(new CustomerOrderedOjekEvent(customerId, orderId, message, timestamp));

## Domain Events >< Exception Handling

    public class DomainEventPublisher {
        public <T> void publish(final T event) {
            // jika sudah / sedang dipublish, return
            if (publishing.get()) {
                return;
            }
            ...
        }
    }

## Lanjutan
    ...
    try {
            publishing.set(true);
            List<DomainEventSubscriber<T>> registeredSubscriber = subscribers.get();
            if (registeredSubscriber != null) {
                Class<?> eventType = event.getClass();

                for(DomainEventSubscriber<T> subscriber : registeredSubscriber) {
                    Class<?> subscribedTo = subscriber.subscribeToEventType();
                    if(subscribedTo == eventType || subscribedTo == DomainEvent.class) {
                        subscriber.handleEvent(event);
                    }
                }
            }

    } catch(Exception e) {
            Logger.sendTo(Provider.SLACK, e);
    } finally {
            publishing.set(false);
    }

// ## Diagram
// .image assets/domain_event_diagram.png 500 800